=head1 NAME

Text::PSTemplate::Manual - Text::PSTemplate Manual

=head1 DESCRIPTION

This document describes Text::PSTemplate distribution from Template designing
perspective. 

HTML example

    <% xml_declaration_if_not_ie6() %>
    <html>
    <title><% $title %></title>
    <body>
        <div>
            <% import('path/to/header.html', {title => $title}) %>
        </div>
        <div>
            <% if_equals($some_var, 'hoge')<<THEN,ELSE %>
                <% $some_var %> is hoge
            <%THEN%>
                <% $some_var %> is something else
            <%ELSE%>
        </div>
        <dl>
            <% &each($hash, 'key' => 'value')<<TPL %>
                <% if($value)<<THEN %>
                    <dt><% $key %></dt>
                    <dd><% $value %></dd>
                <% THEN %>
            <% TPL %>
        </dl>
        <p>
            <% your_func($any, $values, $as, $you, $like)<<EOF1,EOF2 %>
                ...
            <% EOF1 %>
                ...
            <% EOF2 %>
        </p>
    </body>
    </html>

=head1 USAGE

=head2 put vars and functions

Statements must be delimited by certain delimiters. Variables and functions
inside the pair of delimiters has similar appearance to Perl programs.

    <% $str %>
    <% some_func('str') %>
    <% some_func('str') %>
    <% some_func($str) %>

Statements can include line breaks.

    <%
        &str_envif(
            str => 'Internet Explorer is not recommended',
            key => 'USER-AGENT',
            value => 'MSIE',
        )
    %>

=head2 escape

Statement delimiter can be escaped by backslashes so that the delimiter
charactors themselves appear to the output. If you want to parse the statement
after backslash, you can double escape.

    \<% this appears literally %>   ### literally
    \\<% $var %>                    ### A backlash and parsed value
    \\\<% this appears literally %> ### A backslash and literal
    \\\\<% $var %>                  ### Two backlashes and parsed value
    ....

Charactor $ and & is interpolated in any part of statements even in single
quotes. So you must escape them with backslashes when it's needed. 

    <% some_func(price => '\$10.25') %>

=head1 AUTHOR

Sugama Keita, E<lt>sugama@jamadam.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2011 by Sugama Keita.

This program is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.

=cut
